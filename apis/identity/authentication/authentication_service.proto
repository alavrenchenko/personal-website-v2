// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package personalwebsite.identity.authentication;

import "apis/identity/users/user.proto";

option go_package = "personal-website-v2/go-apis/identity/authentication;authentication";

// Proto file describing the Authentication service.

// The authentication service definition.
service AuthenticationService {
	// Creates a user's token and returns it if the operation is successful.
    rpc CreateUserToken(CreateUserTokenRequest) returns (CreateUserTokenResponse) {}

	// Creates a client token and returns it if the operation is successful.
    rpc CreateClientToken(CreateClientTokenRequest) returns (CreateClientTokenResponse) {}

    // Authenticates a user and a client.
    rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {}

    // Authenticates a user.
    rpc AuthenticateUser(AuthenticateUserRequest) returns (AuthenticateUserResponse) {}

    // Authenticates a client.
    rpc AuthenticateClient(AuthenticateClientRequest) returns (AuthenticateClientResponse) {}
}

// Request message for 'AuthenticationService.CreateUserToken'.
message CreateUserTokenRequest {
    // The user's session ID.
    uint64 user_session_id = 1;
}

// Response message for 'AuthenticationService.CreateUserToken'.
message CreateUserTokenResponse {
    // The user's token.
    bytes token = 1;
}

// Request message for 'AuthenticationService.CreateClientToken'.
message CreateClientTokenRequest {
    // The client ID.
    uint64 client_id = 1;
}

// Response message for 'AuthenticationService.CreateClientToken'.
message CreateClientTokenResponse {
    // The client token.
    bytes token = 1;
}

// Request message for 'AuthenticationService.Authenticate'.
message AuthenticateRequest {
    // The user's token.
    bytes user_token = 1;

    // The client token.
    bytes client_token = 2;
}

// Response message for 'AuthenticationService.Authenticate'.
message AuthenticateResponse {
    // The user ID.
    uint64 user_id = 1;

    // The user's type (account type).
    personalwebsite.identity.users.UserTypeEnum.UserType user_type = 2;

    // The client ID.
    uint64 client_id = 3;
}

// Request message for 'AuthenticationService.AuthenticateUser'.
message AuthenticateUserRequest {
    // The user's token.
    bytes user_token = 1;
}

// Response message for 'AuthenticationService.AuthenticateUser'.
message AuthenticateUserResponse {
    // The user ID.
    uint64 user_id = 1;

    // The user's type (account type).
    personalwebsite.identity.users.UserTypeEnum.UserType user_type = 2;
}

// Request message for 'AuthenticationService.AuthenticateClient'.
message AuthenticateClientRequest {
    // The client token.
    bytes client_token = 1;
}

// Response message for 'AuthenticationService.AuthenticateClient'.
message AuthenticateClientResponse {
    // The client ID.
    uint64 client_id = 1;
}
