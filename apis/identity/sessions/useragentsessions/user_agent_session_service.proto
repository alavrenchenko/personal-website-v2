// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package personalwebsite.identity.sessions.useragentsessions;

import "google/protobuf/empty.proto";
import "apis/identity/sessions/useragentsessions/user_agent_session_info.proto";

option go_package = "personal-website-v2/go-apis/identity/sessions/useragentsessions;useragentsessions";

// Proto file describing the User agent session service.

// The user agent session service definition.
service UserAgentSessionService {
	// Creates and starts a web session of the user agent (web)
	// and returns the user agent session ID if the operation is successful.
    rpc CreateAndStartWebSession(CreateAndStartWebSessionRequest) returns (CreateAndStartWebSessionResponse) {}

	// Creates and starts a mobile session of the user agent (mobile)
	// and returns the user agent session ID if the operation is successful.
    rpc CreateAndStartMobileSession(CreateAndStartMobileSessionRequest) returns (CreateAndStartMobileSessionResponse) {}

	// Starts a user agent session by the specified user agent session ID.
    rpc Start(StartRequest) returns (google.protobuf.Empty) {}

	// Terminates a user agent session by the specified user agent session ID.
    rpc Terminate(TerminateRequest) returns (google.protobuf.Empty) {}

	// Deletes a user agent session by the specified user agent session ID.
    rpc Delete(DeleteRequest) returns (google.protobuf.Empty) {}

    // Gets user agent session info by the specified user agent session ID.
    rpc GetById(GetByIdRequest) returns (GetByIdResponse) {}

    // Gets an existing session of the user agent by the specified user ID and client ID.
    rpc GetByUserIdAndClientId(GetByUserIdAndClientIdRequest) returns (GetByUserIdAndClientIdResponse) {}

    // Gets an existing session of the user agent by the specified user agent ID.
    rpc GetByUserAgentId(GetByUserAgentIdRequest) returns (GetByUserAgentIdResponse) {}

	// Gets all user agent sessions by the specified user ID.
    rpc GetAllByUserId(GetAllByUserIdRequest) returns (GetAllByUserIdResponse) {}

	// Gets all user agent sessions by the specified client ID.
    rpc GetAllByClientId(GetAllByClientIdRequest) returns (GetAllByClientIdResponse) {}

	// Returns true if the user agent session exists.
    rpc Exists(ExistsRequest) returns (ExistsResponse) {}

	// Gets a user agent session type by the specified user agent session ID.
    rpc GetTypeById(GetTypeByIdRequest) returns (GetTypeByIdResponse) {}

	// Gets a user agent session status by the specified user agent session ID.
    rpc GetStatusById(GetStatusByIdRequest) returns (GetStatusByIdResponse) {}
}

// Request message for 'UserAgentSessionService.CreateAndStartWebSession'.
message CreateAndStartWebSessionRequest {
    // The user ID who owns the session.
    uint64 user_id = 1;

    // The client ID.
    uint64 client_id = 2;

    // The user agent ID.
    uint64 user_agent_id = 3;

    // The user's session ID.
    uint64 user_session_id = 4;

    // The IP address (sign-in IP address).
    string ip = 5;
}

// Response message for 'UserAgentSessionService.CreateAndStartWebSession'.
message CreateAndStartWebSessionResponse {
    // The user agent session ID.
    uint64 id = 1;
}

// Request message for 'UserAgentSessionService.CreateAndStartMobileSession'.
message CreateAndStartMobileSessionRequest {
    // The user ID who owns the session.
    uint64 user_id = 1;

    // The client ID.
    uint64 client_id = 2;

    // The user agent ID.
    uint64 user_agent_id = 3;

    // The user's session ID.
    uint64 user_session_id = 4;

    // The IP address (sign-in IP address).
    string ip = 5;
}

// Response message for 'UserAgentSessionService.CreateAndStartMobileSession'.
message CreateAndStartMobileSessionResponse {
    // The user agent session ID.
    uint64 id = 1;
}

// Request message for 'UserAgentSessionService.Start'.
message StartRequest {
    // The user agent session ID.
    uint64 id = 1;

    // The user's session ID.
    uint64 user_session_id = 2;

    // The IP address (sign-in IP address).
    string ip = 3;
}

// Request message for 'UserAgentSessionService.Terminate'.
message TerminateRequest {
    // The user agent session ID.
    uint64 id = 1;

	// If signOut is true, then the user agent session is terminated with the status 'SignedOut',
	// otherwise with the status 'Ended'.
    bool sign_out = 2;
}

// Request message for 'UserAgentSessionService.Delete'.
message DeleteRequest {
    // The user agent session ID.
    uint64 id = 1;
}

// Request message for 'UserAgentSessionService.GetById'.
message GetByIdRequest {
    // The user agent session ID.
    uint64 id = 1;
}

// Response message for 'UserAgentSessionService.GetById'.
message GetByIdResponse {
    // The user agent session info.
    UserAgentSessionInfo info = 1;
}

// Request message for 'UserAgentSessionService.GetByUserIdAndClientId'.
message GetByUserIdAndClientIdRequest {
    // The user ID.
    uint64 user_id = 1;

    // The client ID.
    uint64 client_id = 2;
}

// Response message for 'UserAgentSessionService.GetByUserIdAndClientId'.
message GetByUserIdAndClientIdResponse {
    // The user agent session info.
    UserAgentSessionInfo info = 1;
}

// Request message for 'UserAgentSessionService.GetByUserAgentId'.
message GetByUserAgentIdRequest {
    // The user agent ID.
    uint64 user_agent_id = 1;
}

// Response message for 'UserAgentSessionService.GetByUserAgentId'.
message GetByUserAgentIdResponse {
    // The user agent session info.
    UserAgentSessionInfo info = 1;
}

// Request message for 'UserAgentSessionService.GetAllByUserId'.
message GetAllByUserIdRequest {
    // The user ID.
    uint64 user_id = 1;

    // If onlyExisting is true, then only existing sessions of user agents are returned.
    bool only_existing = 2;
}

// Response message for 'UserAgentSessionService.GetAllByUserId'.
message GetAllByUserIdResponse {
    // The user agent sessions.
    repeated UserAgentSessionInfo sessions = 1;
}

// Request message for 'UserAgentSessionService.GetAllByClientId'.
message GetAllByClientIdRequest {
    // The client ID.
    uint64 client_id = 1;

    // If onlyExisting is true, then only existing sessions of user agents are returned.
    bool only_existing = 2;
}

// Response message for 'UserAgentSessionService.GetAllByClientId'.
message GetAllByClientIdResponse {
    // The user agent sessions.
    repeated UserAgentSessionInfo sessions = 1;
}

// Request message for 'UserAgentSessionService.Exists'.
message ExistsRequest {
    // The user ID.
    uint64 user_id = 1;

    // The client ID.
    uint64 client_id = 2;

    // The user agent ID.
    uint64 user_agent_id = 3;
}

// Response message for 'UserAgentSessionService.Exists'.
message ExistsResponse {
    // The user agent session exists.
    bool exists = 1;
}

// Request message for 'UserAgentSessionService.GetTypeById'.
message GetTypeByIdRequest {
    // The user agent session ID.
    uint64 id = 1;
}

// Response message for 'UserAgentSessionService.GetTypeById'.
message GetTypeByIdResponse {
	// The user agent session type.
    UserAgentSessionTypeEnum.UserAgentSessionType type = 1;
}

// Request message for 'UserAgentSessionService.GetStatusById'.
message GetStatusByIdRequest {
    // The user agent session ID.
    uint64 id = 1;
}

// Response message for 'UserAgentSessionService.GetStatusById'.
message GetStatusByIdResponse {
	// The user agent session status.
    UserAgentSessionStatusEnum.UserAgentSessionStatus status = 1;
}
