// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/app-manager/sessions/app_session_service.proto

package sessions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AppSessionService_CreateAndStart_FullMethodName = "/personalwebsite.appmanager.sessions.AppSessionService/CreateAndStart"
	AppSessionService_Terminate_FullMethodName      = "/personalwebsite.appmanager.sessions.AppSessionService/Terminate"
	AppSessionService_GetById_FullMethodName        = "/personalwebsite.appmanager.sessions.AppSessionService/GetById"
)

// AppSessionServiceClient is the client API for AppSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppSessionServiceClient interface {
	// Creates and starts an app session for the specified app
	// and returns app session ID if the operation is successful.
	CreateAndStart(ctx context.Context, in *CreateAndStartRequest, opts ...grpc.CallOption) (*CreateAndStartResponse, error)
	// Terminates an app session by the specified app session ID.
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets app session info by the specified app session ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
}

type appSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppSessionServiceClient(cc grpc.ClientConnInterface) AppSessionServiceClient {
	return &appSessionServiceClient{cc}
}

func (c *appSessionServiceClient) CreateAndStart(ctx context.Context, in *CreateAndStartRequest, opts ...grpc.CallOption) (*CreateAndStartResponse, error) {
	out := new(CreateAndStartResponse)
	err := c.cc.Invoke(ctx, AppSessionService_CreateAndStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSessionServiceClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppSessionService_Terminate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appSessionServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, AppSessionService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppSessionServiceServer is the server API for AppSessionService service.
// All implementations must embed UnimplementedAppSessionServiceServer
// for forward compatibility
type AppSessionServiceServer interface {
	// Creates and starts an app session for the specified app
	// and returns app session ID if the operation is successful.
	CreateAndStart(context.Context, *CreateAndStartRequest) (*CreateAndStartResponse, error)
	// Terminates an app session by the specified app session ID.
	Terminate(context.Context, *TerminateRequest) (*emptypb.Empty, error)
	// Gets app session info by the specified app session ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	mustEmbedUnimplementedAppSessionServiceServer()
}

// UnimplementedAppSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppSessionServiceServer struct {
}

func (UnimplementedAppSessionServiceServer) CreateAndStart(context.Context, *CreateAndStartRequest) (*CreateAndStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndStart not implemented")
}
func (UnimplementedAppSessionServiceServer) Terminate(context.Context, *TerminateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedAppSessionServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedAppSessionServiceServer) mustEmbedUnimplementedAppSessionServiceServer() {}

// UnsafeAppSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppSessionServiceServer will
// result in compilation errors.
type UnsafeAppSessionServiceServer interface {
	mustEmbedUnimplementedAppSessionServiceServer()
}

func RegisterAppSessionServiceServer(s grpc.ServiceRegistrar, srv AppSessionServiceServer) {
	s.RegisterService(&AppSessionService_ServiceDesc, srv)
}

func _AppSessionService_CreateAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSessionServiceServer).CreateAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSessionService_CreateAndStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSessionServiceServer).CreateAndStart(ctx, req.(*CreateAndStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSessionService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSessionServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSessionService_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSessionServiceServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppSessionService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppSessionServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppSessionService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppSessionServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppSessionService_ServiceDesc is the grpc.ServiceDesc for AppSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.appmanager.sessions.AppSessionService",
	HandlerType: (*AppSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndStart",
			Handler:    _AppSessionService_CreateAndStart_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _AppSessionService_Terminate_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _AppSessionService_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/app-manager/sessions/app_session_service.proto",
}
