// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/logging-manager/sessions/logging_session_service.proto

package sessions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LoggingSessionService_CreateAndStart_FullMethodName = "/personalwebsite.loggingmanager.sessions.LoggingSessionService/CreateAndStart"
	LoggingSessionService_GetById_FullMethodName        = "/personalwebsite.loggingmanager.sessions.LoggingSessionService/GetById"
)

// LoggingSessionServiceClient is the client API for LoggingSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoggingSessionServiceClient interface {
	// Creates and starts a logging session for the specified app
	// and returns logging session ID if the operation is successful.
	CreateAndStart(ctx context.Context, in *CreateAndStartRequest, opts ...grpc.CallOption) (*CreateAndStartResponse, error)
	// Gets logging session info by the specified logging session ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
}

type loggingSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoggingSessionServiceClient(cc grpc.ClientConnInterface) LoggingSessionServiceClient {
	return &loggingSessionServiceClient{cc}
}

func (c *loggingSessionServiceClient) CreateAndStart(ctx context.Context, in *CreateAndStartRequest, opts ...grpc.CallOption) (*CreateAndStartResponse, error) {
	out := new(CreateAndStartResponse)
	err := c.cc.Invoke(ctx, LoggingSessionService_CreateAndStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loggingSessionServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, LoggingSessionService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoggingSessionServiceServer is the server API for LoggingSessionService service.
// All implementations must embed UnimplementedLoggingSessionServiceServer
// for forward compatibility
type LoggingSessionServiceServer interface {
	// Creates and starts a logging session for the specified app
	// and returns logging session ID if the operation is successful.
	CreateAndStart(context.Context, *CreateAndStartRequest) (*CreateAndStartResponse, error)
	// Gets logging session info by the specified logging session ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	mustEmbedUnimplementedLoggingSessionServiceServer()
}

// UnimplementedLoggingSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoggingSessionServiceServer struct {
}

func (UnimplementedLoggingSessionServiceServer) CreateAndStart(context.Context, *CreateAndStartRequest) (*CreateAndStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndStart not implemented")
}
func (UnimplementedLoggingSessionServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedLoggingSessionServiceServer) mustEmbedUnimplementedLoggingSessionServiceServer() {}

// UnsafeLoggingSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoggingSessionServiceServer will
// result in compilation errors.
type UnsafeLoggingSessionServiceServer interface {
	mustEmbedUnimplementedLoggingSessionServiceServer()
}

func RegisterLoggingSessionServiceServer(s grpc.ServiceRegistrar, srv LoggingSessionServiceServer) {
	s.RegisterService(&LoggingSessionService_ServiceDesc, srv)
}

func _LoggingSessionService_CreateAndStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingSessionServiceServer).CreateAndStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoggingSessionService_CreateAndStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingSessionServiceServer).CreateAndStart(ctx, req.(*CreateAndStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoggingSessionService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoggingSessionServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoggingSessionService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoggingSessionServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoggingSessionService_ServiceDesc is the grpc.ServiceDesc for LoggingSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoggingSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.loggingmanager.sessions.LoggingSessionService",
	HandlerType: (*LoggingSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndStart",
			Handler:    _LoggingSessionService_CreateAndStart_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _LoggingSessionService_GetById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/logging-manager/sessions/logging_session_service.proto",
}
