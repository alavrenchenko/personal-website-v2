// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/identity/roles/grouproleassignments/group_role_assignment_service.proto

package grouproleassignments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GroupRoleAssignmentService_GetById_FullMethodName                     = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetById"
	GroupRoleAssignmentService_GetByRoleAssignmentId_FullMethodName       = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetByRoleAssignmentId"
	GroupRoleAssignmentService_GetAllByGroup_FullMethodName               = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetAllByGroup"
	GroupRoleAssignmentService_Exists_FullMethodName                      = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/Exists"
	GroupRoleAssignmentService_IsAssigned_FullMethodName                  = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/IsAssigned"
	GroupRoleAssignmentService_GetIdByRoleAssignmentId_FullMethodName     = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetIdByRoleAssignmentId"
	GroupRoleAssignmentService_GetStatusById_FullMethodName               = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetStatusById"
	GroupRoleAssignmentService_GetStatusByRoleAssignmentId_FullMethodName = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetStatusByRoleAssignmentId"
	GroupRoleAssignmentService_GetGroupRoleIdsByGroup_FullMethodName      = "/personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService/GetGroupRoleIdsByGroup"
)

// GroupRoleAssignmentServiceClient is the client API for GroupRoleAssignmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupRoleAssignmentServiceClient interface {
	// Gets a group role assignment by the specified group role assignment ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// Gets a group role assignment by the specified role assignment ID.
	GetByRoleAssignmentId(ctx context.Context, in *GetByRoleAssignmentIdRequest, opts ...grpc.CallOption) (*GetByRoleAssignmentIdResponse, error)
	// Gets all role assignments of the group by the specified group.
	GetAllByGroup(ctx context.Context, in *GetAllByGroupRequest, opts ...grpc.CallOption) (*GetAllByGroupResponse, error)
	// Returns true if the group role assignment exists.
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Returns true if the role is assigned to the group.
	IsAssigned(ctx context.Context, in *IsAssignedRequest, opts ...grpc.CallOption) (*IsAssignedResponse, error)
	// Gets the group role assignment ID by the specified role assignment ID.
	GetIdByRoleAssignmentId(ctx context.Context, in *GetIdByRoleAssignmentIdRequest, opts ...grpc.CallOption) (*GetIdByRoleAssignmentIdResponse, error)
	// Gets a group role assignment status by the specified group role assignment ID.
	GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error)
	// Gets a group role assignment status by the specified role assignment ID.
	GetStatusByRoleAssignmentId(ctx context.Context, in *GetStatusByRoleAssignmentIdRequest, opts ...grpc.CallOption) (*GetStatusByRoleAssignmentIdResponse, error)
	// Gets the IDs of the roles assigned to the group by the specified group.
	// If the role filter is empty, then all assigned roles are returned, otherwise only the roles
	// specified in the filter, if any, are returned.
	GetGroupRoleIdsByGroup(ctx context.Context, in *GetGroupRoleIdsByGroupRequest, opts ...grpc.CallOption) (*GetGroupRoleIdsByGroupResponse, error)
}

type groupRoleAssignmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupRoleAssignmentServiceClient(cc grpc.ClientConnInterface) GroupRoleAssignmentServiceClient {
	return &groupRoleAssignmentServiceClient{cc}
}

func (c *groupRoleAssignmentServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) GetByRoleAssignmentId(ctx context.Context, in *GetByRoleAssignmentIdRequest, opts ...grpc.CallOption) (*GetByRoleAssignmentIdResponse, error) {
	out := new(GetByRoleAssignmentIdResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetByRoleAssignmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) GetAllByGroup(ctx context.Context, in *GetAllByGroupRequest, opts ...grpc.CallOption) (*GetAllByGroupResponse, error) {
	out := new(GetAllByGroupResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetAllByGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) IsAssigned(ctx context.Context, in *IsAssignedRequest, opts ...grpc.CallOption) (*IsAssignedResponse, error) {
	out := new(IsAssignedResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_IsAssigned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) GetIdByRoleAssignmentId(ctx context.Context, in *GetIdByRoleAssignmentIdRequest, opts ...grpc.CallOption) (*GetIdByRoleAssignmentIdResponse, error) {
	out := new(GetIdByRoleAssignmentIdResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetIdByRoleAssignmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error) {
	out := new(GetStatusByIdResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetStatusById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) GetStatusByRoleAssignmentId(ctx context.Context, in *GetStatusByRoleAssignmentIdRequest, opts ...grpc.CallOption) (*GetStatusByRoleAssignmentIdResponse, error) {
	out := new(GetStatusByRoleAssignmentIdResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetStatusByRoleAssignmentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRoleAssignmentServiceClient) GetGroupRoleIdsByGroup(ctx context.Context, in *GetGroupRoleIdsByGroupRequest, opts ...grpc.CallOption) (*GetGroupRoleIdsByGroupResponse, error) {
	out := new(GetGroupRoleIdsByGroupResponse)
	err := c.cc.Invoke(ctx, GroupRoleAssignmentService_GetGroupRoleIdsByGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupRoleAssignmentServiceServer is the server API for GroupRoleAssignmentService service.
// All implementations must embed UnimplementedGroupRoleAssignmentServiceServer
// for forward compatibility
type GroupRoleAssignmentServiceServer interface {
	// Gets a group role assignment by the specified group role assignment ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// Gets a group role assignment by the specified role assignment ID.
	GetByRoleAssignmentId(context.Context, *GetByRoleAssignmentIdRequest) (*GetByRoleAssignmentIdResponse, error)
	// Gets all role assignments of the group by the specified group.
	GetAllByGroup(context.Context, *GetAllByGroupRequest) (*GetAllByGroupResponse, error)
	// Returns true if the group role assignment exists.
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	// Returns true if the role is assigned to the group.
	IsAssigned(context.Context, *IsAssignedRequest) (*IsAssignedResponse, error)
	// Gets the group role assignment ID by the specified role assignment ID.
	GetIdByRoleAssignmentId(context.Context, *GetIdByRoleAssignmentIdRequest) (*GetIdByRoleAssignmentIdResponse, error)
	// Gets a group role assignment status by the specified group role assignment ID.
	GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error)
	// Gets a group role assignment status by the specified role assignment ID.
	GetStatusByRoleAssignmentId(context.Context, *GetStatusByRoleAssignmentIdRequest) (*GetStatusByRoleAssignmentIdResponse, error)
	// Gets the IDs of the roles assigned to the group by the specified group.
	// If the role filter is empty, then all assigned roles are returned, otherwise only the roles
	// specified in the filter, if any, are returned.
	GetGroupRoleIdsByGroup(context.Context, *GetGroupRoleIdsByGroupRequest) (*GetGroupRoleIdsByGroupResponse, error)
	mustEmbedUnimplementedGroupRoleAssignmentServiceServer()
}

// UnimplementedGroupRoleAssignmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupRoleAssignmentServiceServer struct {
}

func (UnimplementedGroupRoleAssignmentServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) GetByRoleAssignmentId(context.Context, *GetByRoleAssignmentIdRequest) (*GetByRoleAssignmentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByRoleAssignmentId not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) GetAllByGroup(context.Context, *GetAllByGroupRequest) (*GetAllByGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByGroup not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) IsAssigned(context.Context, *IsAssignedRequest) (*IsAssignedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAssigned not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) GetIdByRoleAssignmentId(context.Context, *GetIdByRoleAssignmentIdRequest) (*GetIdByRoleAssignmentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdByRoleAssignmentId not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusById not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) GetStatusByRoleAssignmentId(context.Context, *GetStatusByRoleAssignmentIdRequest) (*GetStatusByRoleAssignmentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusByRoleAssignmentId not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) GetGroupRoleIdsByGroup(context.Context, *GetGroupRoleIdsByGroupRequest) (*GetGroupRoleIdsByGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupRoleIdsByGroup not implemented")
}
func (UnimplementedGroupRoleAssignmentServiceServer) mustEmbedUnimplementedGroupRoleAssignmentServiceServer() {
}

// UnsafeGroupRoleAssignmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupRoleAssignmentServiceServer will
// result in compilation errors.
type UnsafeGroupRoleAssignmentServiceServer interface {
	mustEmbedUnimplementedGroupRoleAssignmentServiceServer()
}

func RegisterGroupRoleAssignmentServiceServer(s grpc.ServiceRegistrar, srv GroupRoleAssignmentServiceServer) {
	s.RegisterService(&GroupRoleAssignmentService_ServiceDesc, srv)
}

func _GroupRoleAssignmentService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_GetByRoleAssignmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByRoleAssignmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetByRoleAssignmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetByRoleAssignmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetByRoleAssignmentId(ctx, req.(*GetByRoleAssignmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_GetAllByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetAllByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetAllByGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetAllByGroup(ctx, req.(*GetAllByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_IsAssigned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAssignedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).IsAssigned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_IsAssigned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).IsAssigned(ctx, req.(*IsAssignedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_GetIdByRoleAssignmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdByRoleAssignmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetIdByRoleAssignmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetIdByRoleAssignmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetIdByRoleAssignmentId(ctx, req.(*GetIdByRoleAssignmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_GetStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetStatusById(ctx, req.(*GetStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_GetStatusByRoleAssignmentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByRoleAssignmentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetStatusByRoleAssignmentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetStatusByRoleAssignmentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetStatusByRoleAssignmentId(ctx, req.(*GetStatusByRoleAssignmentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRoleAssignmentService_GetGroupRoleIdsByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupRoleIdsByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRoleAssignmentServiceServer).GetGroupRoleIdsByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GroupRoleAssignmentService_GetGroupRoleIdsByGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRoleAssignmentServiceServer).GetGroupRoleIdsByGroup(ctx, req.(*GetGroupRoleIdsByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupRoleAssignmentService_ServiceDesc is the grpc.ServiceDesc for GroupRoleAssignmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupRoleAssignmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.identity.roles.grouproleassignments.GroupRoleAssignmentService",
	HandlerType: (*GroupRoleAssignmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _GroupRoleAssignmentService_GetById_Handler,
		},
		{
			MethodName: "GetByRoleAssignmentId",
			Handler:    _GroupRoleAssignmentService_GetByRoleAssignmentId_Handler,
		},
		{
			MethodName: "GetAllByGroup",
			Handler:    _GroupRoleAssignmentService_GetAllByGroup_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _GroupRoleAssignmentService_Exists_Handler,
		},
		{
			MethodName: "IsAssigned",
			Handler:    _GroupRoleAssignmentService_IsAssigned_Handler,
		},
		{
			MethodName: "GetIdByRoleAssignmentId",
			Handler:    _GroupRoleAssignmentService_GetIdByRoleAssignmentId_Handler,
		},
		{
			MethodName: "GetStatusById",
			Handler:    _GroupRoleAssignmentService_GetStatusById_Handler,
		},
		{
			MethodName: "GetStatusByRoleAssignmentId",
			Handler:    _GroupRoleAssignmentService_GetStatusByRoleAssignmentId_Handler,
		},
		{
			MethodName: "GetGroupRoleIdsByGroup",
			Handler:    _GroupRoleAssignmentService_GetGroupRoleIdsByGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/identity/roles/grouproleassignments/group_role_assignment_service.proto",
}
