// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/identity/sessions/useragentsessions/user_agent_session_service.proto

package useragentsessions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAgentSessionService_CreateAndStartWebSession_FullMethodName    = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/CreateAndStartWebSession"
	UserAgentSessionService_CreateAndStartMobileSession_FullMethodName = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/CreateAndStartMobileSession"
	UserAgentSessionService_Start_FullMethodName                       = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/Start"
	UserAgentSessionService_Terminate_FullMethodName                   = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/Terminate"
	UserAgentSessionService_Delete_FullMethodName                      = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/Delete"
	UserAgentSessionService_GetById_FullMethodName                     = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetById"
	UserAgentSessionService_GetByUserIdAndClientId_FullMethodName      = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetByUserIdAndClientId"
	UserAgentSessionService_GetByUserAgentId_FullMethodName            = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetByUserAgentId"
	UserAgentSessionService_GetAllByUserId_FullMethodName              = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetAllByUserId"
	UserAgentSessionService_GetAllByClientId_FullMethodName            = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetAllByClientId"
	UserAgentSessionService_Exists_FullMethodName                      = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/Exists"
	UserAgentSessionService_GetTypeById_FullMethodName                 = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetTypeById"
	UserAgentSessionService_GetStatusById_FullMethodName               = "/personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService/GetStatusById"
)

// UserAgentSessionServiceClient is the client API for UserAgentSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAgentSessionServiceClient interface {
	// Creates and starts a web session of the user agent (web)
	// and returns the user agent session ID if the operation is successful.
	CreateAndStartWebSession(ctx context.Context, in *CreateAndStartWebSessionRequest, opts ...grpc.CallOption) (*CreateAndStartWebSessionResponse, error)
	// Creates and starts a mobile session of the user agent (mobile)
	// and returns the user agent session ID if the operation is successful.
	CreateAndStartMobileSession(ctx context.Context, in *CreateAndStartMobileSessionRequest, opts ...grpc.CallOption) (*CreateAndStartMobileSessionResponse, error)
	// Starts a user agent session by the specified user agent session ID.
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Terminates a user agent session by the specified user agent session ID.
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes a user agent session by the specified user agent session ID.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets user agent session info by the specified user agent session ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// Gets an existing session of the user agent by the specified user ID and client ID.
	GetByUserIdAndClientId(ctx context.Context, in *GetByUserIdAndClientIdRequest, opts ...grpc.CallOption) (*GetByUserIdAndClientIdResponse, error)
	// Gets an existing session of the user agent by the specified user agent ID.
	GetByUserAgentId(ctx context.Context, in *GetByUserAgentIdRequest, opts ...grpc.CallOption) (*GetByUserAgentIdResponse, error)
	// Gets all user agent sessions by the specified user ID.
	GetAllByUserId(ctx context.Context, in *GetAllByUserIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdResponse, error)
	// Gets all user agent sessions by the specified client ID.
	GetAllByClientId(ctx context.Context, in *GetAllByClientIdRequest, opts ...grpc.CallOption) (*GetAllByClientIdResponse, error)
	// Returns true if the user agent session exists.
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Gets a user agent session type by the specified user agent session ID.
	GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error)
	// Gets a user agent session status by the specified user agent session ID.
	GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error)
}

type userAgentSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAgentSessionServiceClient(cc grpc.ClientConnInterface) UserAgentSessionServiceClient {
	return &userAgentSessionServiceClient{cc}
}

func (c *userAgentSessionServiceClient) CreateAndStartWebSession(ctx context.Context, in *CreateAndStartWebSessionRequest, opts ...grpc.CallOption) (*CreateAndStartWebSessionResponse, error) {
	out := new(CreateAndStartWebSessionResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_CreateAndStartWebSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) CreateAndStartMobileSession(ctx context.Context, in *CreateAndStartMobileSessionRequest, opts ...grpc.CallOption) (*CreateAndStartMobileSessionResponse, error) {
	out := new(CreateAndStartMobileSessionResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_CreateAndStartMobileSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAgentSessionService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAgentSessionService_Terminate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAgentSessionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetByUserIdAndClientId(ctx context.Context, in *GetByUserIdAndClientIdRequest, opts ...grpc.CallOption) (*GetByUserIdAndClientIdResponse, error) {
	out := new(GetByUserIdAndClientIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetByUserIdAndClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetByUserAgentId(ctx context.Context, in *GetByUserAgentIdRequest, opts ...grpc.CallOption) (*GetByUserAgentIdResponse, error) {
	out := new(GetByUserAgentIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetByUserAgentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetAllByUserId(ctx context.Context, in *GetAllByUserIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdResponse, error) {
	out := new(GetAllByUserIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetAllByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetAllByClientId(ctx context.Context, in *GetAllByClientIdRequest, opts ...grpc.CallOption) (*GetAllByClientIdResponse, error) {
	out := new(GetAllByClientIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetAllByClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error) {
	out := new(GetTypeByIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetTypeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentSessionServiceClient) GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error) {
	out := new(GetStatusByIdResponse)
	err := c.cc.Invoke(ctx, UserAgentSessionService_GetStatusById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAgentSessionServiceServer is the server API for UserAgentSessionService service.
// All implementations must embed UnimplementedUserAgentSessionServiceServer
// for forward compatibility
type UserAgentSessionServiceServer interface {
	// Creates and starts a web session of the user agent (web)
	// and returns the user agent session ID if the operation is successful.
	CreateAndStartWebSession(context.Context, *CreateAndStartWebSessionRequest) (*CreateAndStartWebSessionResponse, error)
	// Creates and starts a mobile session of the user agent (mobile)
	// and returns the user agent session ID if the operation is successful.
	CreateAndStartMobileSession(context.Context, *CreateAndStartMobileSessionRequest) (*CreateAndStartMobileSessionResponse, error)
	// Starts a user agent session by the specified user agent session ID.
	Start(context.Context, *StartRequest) (*emptypb.Empty, error)
	// Terminates a user agent session by the specified user agent session ID.
	Terminate(context.Context, *TerminateRequest) (*emptypb.Empty, error)
	// Deletes a user agent session by the specified user agent session ID.
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// Gets user agent session info by the specified user agent session ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// Gets an existing session of the user agent by the specified user ID and client ID.
	GetByUserIdAndClientId(context.Context, *GetByUserIdAndClientIdRequest) (*GetByUserIdAndClientIdResponse, error)
	// Gets an existing session of the user agent by the specified user agent ID.
	GetByUserAgentId(context.Context, *GetByUserAgentIdRequest) (*GetByUserAgentIdResponse, error)
	// Gets all user agent sessions by the specified user ID.
	GetAllByUserId(context.Context, *GetAllByUserIdRequest) (*GetAllByUserIdResponse, error)
	// Gets all user agent sessions by the specified client ID.
	GetAllByClientId(context.Context, *GetAllByClientIdRequest) (*GetAllByClientIdResponse, error)
	// Returns true if the user agent session exists.
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	// Gets a user agent session type by the specified user agent session ID.
	GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error)
	// Gets a user agent session status by the specified user agent session ID.
	GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error)
	mustEmbedUnimplementedUserAgentSessionServiceServer()
}

// UnimplementedUserAgentSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAgentSessionServiceServer struct {
}

func (UnimplementedUserAgentSessionServiceServer) CreateAndStartWebSession(context.Context, *CreateAndStartWebSessionRequest) (*CreateAndStartWebSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndStartWebSession not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) CreateAndStartMobileSession(context.Context, *CreateAndStartMobileSessionRequest) (*CreateAndStartMobileSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndStartMobileSession not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) Start(context.Context, *StartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) Terminate(context.Context, *TerminateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetByUserIdAndClientId(context.Context, *GetByUserIdAndClientIdRequest) (*GetByUserIdAndClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserIdAndClientId not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetByUserAgentId(context.Context, *GetByUserAgentIdRequest) (*GetByUserAgentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserAgentId not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetAllByUserId(context.Context, *GetAllByUserIdRequest) (*GetAllByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserId not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetAllByClientId(context.Context, *GetAllByClientIdRequest) (*GetAllByClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByClientId not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeById not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusById not implemented")
}
func (UnimplementedUserAgentSessionServiceServer) mustEmbedUnimplementedUserAgentSessionServiceServer() {
}

// UnsafeUserAgentSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAgentSessionServiceServer will
// result in compilation errors.
type UnsafeUserAgentSessionServiceServer interface {
	mustEmbedUnimplementedUserAgentSessionServiceServer()
}

func RegisterUserAgentSessionServiceServer(s grpc.ServiceRegistrar, srv UserAgentSessionServiceServer) {
	s.RegisterService(&UserAgentSessionService_ServiceDesc, srv)
}

func _UserAgentSessionService_CreateAndStartWebSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndStartWebSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).CreateAndStartWebSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_CreateAndStartWebSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).CreateAndStartWebSession(ctx, req.(*CreateAndStartWebSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_CreateAndStartMobileSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndStartMobileSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).CreateAndStartMobileSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_CreateAndStartMobileSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).CreateAndStartMobileSession(ctx, req.(*CreateAndStartMobileSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetByUserIdAndClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserIdAndClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetByUserIdAndClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetByUserIdAndClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetByUserIdAndClientId(ctx, req.(*GetByUserIdAndClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetByUserAgentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserAgentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetByUserAgentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetByUserAgentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetByUserAgentId(ctx, req.(*GetByUserAgentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetAllByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetAllByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetAllByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetAllByUserId(ctx, req.(*GetAllByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetAllByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetAllByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetAllByClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetAllByClientId(ctx, req.(*GetAllByClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetTypeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetTypeById(ctx, req.(*GetTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentSessionService_GetStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentSessionServiceServer).GetStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentSessionService_GetStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentSessionServiceServer).GetStatusById(ctx, req.(*GetStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAgentSessionService_ServiceDesc is the grpc.ServiceDesc for UserAgentSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAgentSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.identity.sessions.useragentsessions.UserAgentSessionService",
	HandlerType: (*UserAgentSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndStartWebSession",
			Handler:    _UserAgentSessionService_CreateAndStartWebSession_Handler,
		},
		{
			MethodName: "CreateAndStartMobileSession",
			Handler:    _UserAgentSessionService_CreateAndStartMobileSession_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _UserAgentSessionService_Start_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _UserAgentSessionService_Terminate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserAgentSessionService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserAgentSessionService_GetById_Handler,
		},
		{
			MethodName: "GetByUserIdAndClientId",
			Handler:    _UserAgentSessionService_GetByUserIdAndClientId_Handler,
		},
		{
			MethodName: "GetByUserAgentId",
			Handler:    _UserAgentSessionService_GetByUserAgentId_Handler,
		},
		{
			MethodName: "GetAllByUserId",
			Handler:    _UserAgentSessionService_GetAllByUserId_Handler,
		},
		{
			MethodName: "GetAllByClientId",
			Handler:    _UserAgentSessionService_GetAllByClientId_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _UserAgentSessionService_Exists_Handler,
		},
		{
			MethodName: "GetTypeById",
			Handler:    _UserAgentSessionService_GetTypeById_Handler,
		},
		{
			MethodName: "GetStatusById",
			Handler:    _UserAgentSessionService_GetStatusById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/identity/sessions/useragentsessions/user_agent_session_service.proto",
}
