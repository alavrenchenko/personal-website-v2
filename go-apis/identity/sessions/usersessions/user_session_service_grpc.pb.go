// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/identity/sessions/usersessions/user_session_service.proto

package usersessions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserSessionService_CreateAndStartWebSession_FullMethodName    = "/personalwebsite.identity.sessions.usersessions.UserSessionService/CreateAndStartWebSession"
	UserSessionService_CreateAndStartMobileSession_FullMethodName = "/personalwebsite.identity.sessions.usersessions.UserSessionService/CreateAndStartMobileSession"
	UserSessionService_Terminate_FullMethodName                   = "/personalwebsite.identity.sessions.usersessions.UserSessionService/Terminate"
	UserSessionService_GetById_FullMethodName                     = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetById"
	UserSessionService_GetAllByUserId_FullMethodName              = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetAllByUserId"
	UserSessionService_GetAllByClientId_FullMethodName            = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetAllByClientId"
	UserSessionService_GetAllByUserIdAndClientId_FullMethodName   = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetAllByUserIdAndClientId"
	UserSessionService_GetAllByUserAgentId_FullMethodName         = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetAllByUserAgentId"
	UserSessionService_Exists_FullMethodName                      = "/personalwebsite.identity.sessions.usersessions.UserSessionService/Exists"
	UserSessionService_GetTypeById_FullMethodName                 = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetTypeById"
	UserSessionService_GetStatusById_FullMethodName               = "/personalwebsite.identity.sessions.usersessions.UserSessionService/GetStatusById"
)

// UserSessionServiceClient is the client API for UserSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSessionServiceClient interface {
	// Creates and starts a user's web session and returns the user's session ID
	// if the operation is successful.
	CreateAndStartWebSession(ctx context.Context, in *CreateAndStartWebSessionRequest, opts ...grpc.CallOption) (*CreateAndStartWebSessionResponse, error)
	// Creates and starts a user's mobile session and returns the user's session ID
	// if the operation is successful.
	CreateAndStartMobileSession(ctx context.Context, in *CreateAndStartMobileSessionRequest, opts ...grpc.CallOption) (*CreateAndStartMobileSessionResponse, error)
	// Terminates a user's session by the specified user session ID.
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets user's session info by the specified user session ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// Gets all user's sessions by the specified user ID.
	GetAllByUserId(ctx context.Context, in *GetAllByUserIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdResponse, error)
	// Gets all sessions of users by the specified client ID.
	GetAllByClientId(ctx context.Context, in *GetAllByClientIdRequest, opts ...grpc.CallOption) (*GetAllByClientIdResponse, error)
	// Gets all user's sessions by the specified user ID and client ID.
	GetAllByUserIdAndClientId(ctx context.Context, in *GetAllByUserIdAndClientIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdAndClientIdResponse, error)
	// Gets all user's sessions by the specified user agent ID.
	GetAllByUserAgentId(ctx context.Context, in *GetAllByUserAgentIdRequest, opts ...grpc.CallOption) (*GetAllByUserAgentIdResponse, error)
	// Returns true if the user's session exists.
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Gets a user's session type by the specified user session ID.
	GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error)
	// Gets a user's session status by the specified user session ID.
	GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error)
}

type userSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSessionServiceClient(cc grpc.ClientConnInterface) UserSessionServiceClient {
	return &userSessionServiceClient{cc}
}

func (c *userSessionServiceClient) CreateAndStartWebSession(ctx context.Context, in *CreateAndStartWebSessionRequest, opts ...grpc.CallOption) (*CreateAndStartWebSessionResponse, error) {
	out := new(CreateAndStartWebSessionResponse)
	err := c.cc.Invoke(ctx, UserSessionService_CreateAndStartWebSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) CreateAndStartMobileSession(ctx context.Context, in *CreateAndStartMobileSessionRequest, opts ...grpc.CallOption) (*CreateAndStartMobileSessionResponse, error) {
	out := new(CreateAndStartMobileSessionResponse)
	err := c.cc.Invoke(ctx, UserSessionService_CreateAndStartMobileSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserSessionService_Terminate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetAllByUserId(ctx context.Context, in *GetAllByUserIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdResponse, error) {
	out := new(GetAllByUserIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetAllByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetAllByClientId(ctx context.Context, in *GetAllByClientIdRequest, opts ...grpc.CallOption) (*GetAllByClientIdResponse, error) {
	out := new(GetAllByClientIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetAllByClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetAllByUserIdAndClientId(ctx context.Context, in *GetAllByUserIdAndClientIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdAndClientIdResponse, error) {
	out := new(GetAllByUserIdAndClientIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetAllByUserIdAndClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetAllByUserAgentId(ctx context.Context, in *GetAllByUserAgentIdRequest, opts ...grpc.CallOption) (*GetAllByUserAgentIdResponse, error) {
	out := new(GetAllByUserAgentIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetAllByUserAgentId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, UserSessionService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error) {
	out := new(GetTypeByIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetTypeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSessionServiceClient) GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error) {
	out := new(GetStatusByIdResponse)
	err := c.cc.Invoke(ctx, UserSessionService_GetStatusById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSessionServiceServer is the server API for UserSessionService service.
// All implementations must embed UnimplementedUserSessionServiceServer
// for forward compatibility
type UserSessionServiceServer interface {
	// Creates and starts a user's web session and returns the user's session ID
	// if the operation is successful.
	CreateAndStartWebSession(context.Context, *CreateAndStartWebSessionRequest) (*CreateAndStartWebSessionResponse, error)
	// Creates and starts a user's mobile session and returns the user's session ID
	// if the operation is successful.
	CreateAndStartMobileSession(context.Context, *CreateAndStartMobileSessionRequest) (*CreateAndStartMobileSessionResponse, error)
	// Terminates a user's session by the specified user session ID.
	Terminate(context.Context, *TerminateRequest) (*emptypb.Empty, error)
	// Gets user's session info by the specified user session ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// Gets all user's sessions by the specified user ID.
	GetAllByUserId(context.Context, *GetAllByUserIdRequest) (*GetAllByUserIdResponse, error)
	// Gets all sessions of users by the specified client ID.
	GetAllByClientId(context.Context, *GetAllByClientIdRequest) (*GetAllByClientIdResponse, error)
	// Gets all user's sessions by the specified user ID and client ID.
	GetAllByUserIdAndClientId(context.Context, *GetAllByUserIdAndClientIdRequest) (*GetAllByUserIdAndClientIdResponse, error)
	// Gets all user's sessions by the specified user agent ID.
	GetAllByUserAgentId(context.Context, *GetAllByUserAgentIdRequest) (*GetAllByUserAgentIdResponse, error)
	// Returns true if the user's session exists.
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	// Gets a user's session type by the specified user session ID.
	GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error)
	// Gets a user's session status by the specified user session ID.
	GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error)
	mustEmbedUnimplementedUserSessionServiceServer()
}

// UnimplementedUserSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserSessionServiceServer struct {
}

func (UnimplementedUserSessionServiceServer) CreateAndStartWebSession(context.Context, *CreateAndStartWebSessionRequest) (*CreateAndStartWebSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndStartWebSession not implemented")
}
func (UnimplementedUserSessionServiceServer) CreateAndStartMobileSession(context.Context, *CreateAndStartMobileSessionRequest) (*CreateAndStartMobileSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAndStartMobileSession not implemented")
}
func (UnimplementedUserSessionServiceServer) Terminate(context.Context, *TerminateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedUserSessionServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserSessionServiceServer) GetAllByUserId(context.Context, *GetAllByUserIdRequest) (*GetAllByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserId not implemented")
}
func (UnimplementedUserSessionServiceServer) GetAllByClientId(context.Context, *GetAllByClientIdRequest) (*GetAllByClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByClientId not implemented")
}
func (UnimplementedUserSessionServiceServer) GetAllByUserIdAndClientId(context.Context, *GetAllByUserIdAndClientIdRequest) (*GetAllByUserIdAndClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserIdAndClientId not implemented")
}
func (UnimplementedUserSessionServiceServer) GetAllByUserAgentId(context.Context, *GetAllByUserAgentIdRequest) (*GetAllByUserAgentIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserAgentId not implemented")
}
func (UnimplementedUserSessionServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedUserSessionServiceServer) GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeById not implemented")
}
func (UnimplementedUserSessionServiceServer) GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusById not implemented")
}
func (UnimplementedUserSessionServiceServer) mustEmbedUnimplementedUserSessionServiceServer() {}

// UnsafeUserSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSessionServiceServer will
// result in compilation errors.
type UnsafeUserSessionServiceServer interface {
	mustEmbedUnimplementedUserSessionServiceServer()
}

func RegisterUserSessionServiceServer(s grpc.ServiceRegistrar, srv UserSessionServiceServer) {
	s.RegisterService(&UserSessionService_ServiceDesc, srv)
}

func _UserSessionService_CreateAndStartWebSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndStartWebSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).CreateAndStartWebSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_CreateAndStartWebSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).CreateAndStartWebSession(ctx, req.(*CreateAndStartWebSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_CreateAndStartMobileSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAndStartMobileSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).CreateAndStartMobileSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_CreateAndStartMobileSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).CreateAndStartMobileSession(ctx, req.(*CreateAndStartMobileSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetAllByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetAllByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetAllByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetAllByUserId(ctx, req.(*GetAllByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetAllByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetAllByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetAllByClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetAllByClientId(ctx, req.(*GetAllByClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetAllByUserIdAndClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByUserIdAndClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetAllByUserIdAndClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetAllByUserIdAndClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetAllByUserIdAndClientId(ctx, req.(*GetAllByUserIdAndClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetAllByUserAgentId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByUserAgentIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetAllByUserAgentId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetAllByUserAgentId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetAllByUserAgentId(ctx, req.(*GetAllByUserAgentIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetTypeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetTypeById(ctx, req.(*GetTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSessionService_GetStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSessionServiceServer).GetStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserSessionService_GetStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSessionServiceServer).GetStatusById(ctx, req.(*GetStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSessionService_ServiceDesc is the grpc.ServiceDesc for UserSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.identity.sessions.usersessions.UserSessionService",
	HandlerType: (*UserSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAndStartWebSession",
			Handler:    _UserSessionService_CreateAndStartWebSession_Handler,
		},
		{
			MethodName: "CreateAndStartMobileSession",
			Handler:    _UserSessionService_CreateAndStartMobileSession_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _UserSessionService_Terminate_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserSessionService_GetById_Handler,
		},
		{
			MethodName: "GetAllByUserId",
			Handler:    _UserSessionService_GetAllByUserId_Handler,
		},
		{
			MethodName: "GetAllByClientId",
			Handler:    _UserSessionService_GetAllByClientId_Handler,
		},
		{
			MethodName: "GetAllByUserIdAndClientId",
			Handler:    _UserSessionService_GetAllByUserIdAndClientId_Handler,
		},
		{
			MethodName: "GetAllByUserAgentId",
			Handler:    _UserSessionService_GetAllByUserAgentId_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _UserSessionService_Exists_Handler,
		},
		{
			MethodName: "GetTypeById",
			Handler:    _UserSessionService_GetTypeById_Handler,
		},
		{
			MethodName: "GetStatusById",
			Handler:    _UserSessionService_GetStatusById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/identity/sessions/usersessions/user_session_service.proto",
}
