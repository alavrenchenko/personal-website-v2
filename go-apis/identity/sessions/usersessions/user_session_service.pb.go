// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: apis/identity/sessions/usersessions/user_session_service.proto

package usersessions

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for 'UserSessionService.CreateAndStartWebSession'.
type CreateAndStartWebSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID who owns the session.
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The client ID.
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The user agent ID.
	UserAgentId uint64 `protobuf:"varint,3,opt,name=user_agent_id,json=userAgentId,proto3" json:"user_agent_id,omitempty"`
	// Optional. The app ID.
	AppId *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The first IP address (sign-in IP address).
	FirstIp string `protobuf:"bytes,5,opt,name=first_ip,json=firstIp,proto3" json:"first_ip,omitempty"`
}

func (x *CreateAndStartWebSessionRequest) Reset() {
	*x = CreateAndStartWebSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndStartWebSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndStartWebSessionRequest) ProtoMessage() {}

func (x *CreateAndStartWebSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndStartWebSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateAndStartWebSessionRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateAndStartWebSessionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateAndStartWebSessionRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *CreateAndStartWebSessionRequest) GetUserAgentId() uint64 {
	if x != nil {
		return x.UserAgentId
	}
	return 0
}

func (x *CreateAndStartWebSessionRequest) GetAppId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.AppId
	}
	return nil
}

func (x *CreateAndStartWebSessionRequest) GetFirstIp() string {
	if x != nil {
		return x.FirstIp
	}
	return ""
}

// Response message for 'UserSessionService.CreateAndStartWebSession'.
type CreateAndStartWebSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session ID.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateAndStartWebSessionResponse) Reset() {
	*x = CreateAndStartWebSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndStartWebSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndStartWebSessionResponse) ProtoMessage() {}

func (x *CreateAndStartWebSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndStartWebSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateAndStartWebSessionResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAndStartWebSessionResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for 'UserSessionService.CreateAndStartMobileSession'.
type CreateAndStartMobileSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID who owns the session.
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The client ID.
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The user agent ID.
	UserAgentId uint64 `protobuf:"varint,3,opt,name=user_agent_id,json=userAgentId,proto3" json:"user_agent_id,omitempty"`
	// The app ID.
	AppId uint64 `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	// The first IP address (sign-in IP address).
	FirstIp string `protobuf:"bytes,5,opt,name=first_ip,json=firstIp,proto3" json:"first_ip,omitempty"`
}

func (x *CreateAndStartMobileSessionRequest) Reset() {
	*x = CreateAndStartMobileSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndStartMobileSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndStartMobileSessionRequest) ProtoMessage() {}

func (x *CreateAndStartMobileSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndStartMobileSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateAndStartMobileSessionRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAndStartMobileSessionRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateAndStartMobileSessionRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *CreateAndStartMobileSessionRequest) GetUserAgentId() uint64 {
	if x != nil {
		return x.UserAgentId
	}
	return 0
}

func (x *CreateAndStartMobileSessionRequest) GetAppId() uint64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *CreateAndStartMobileSessionRequest) GetFirstIp() string {
	if x != nil {
		return x.FirstIp
	}
	return ""
}

// Response message for 'UserSessionService.CreateAndStartMobileSession'.
type CreateAndStartMobileSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session ID.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateAndStartMobileSessionResponse) Reset() {
	*x = CreateAndStartMobileSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAndStartMobileSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAndStartMobileSessionResponse) ProtoMessage() {}

func (x *CreateAndStartMobileSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAndStartMobileSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateAndStartMobileSessionResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAndStartMobileSessionResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for 'UserSessionService.Terminate'.
type TerminateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session ID.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TerminateRequest) Reset() {
	*x = TerminateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateRequest) ProtoMessage() {}

func (x *TerminateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateRequest.ProtoReflect.Descriptor instead.
func (*TerminateRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{4}
}

func (x *TerminateRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Request message for 'UserSessionService.GetById'.
type GetByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session ID.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetByIdRequest) Reset() {
	*x = GetByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdRequest) ProtoMessage() {}

func (x *GetByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdRequest.ProtoReflect.Descriptor instead.
func (*GetByIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetByIdRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for 'UserSessionService.GetById'.
type GetByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session info.
	Info *UserSessionInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetByIdResponse) Reset() {
	*x = GetByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetByIdResponse) ProtoMessage() {}

func (x *GetByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetByIdResponse.ProtoReflect.Descriptor instead.
func (*GetByIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetByIdResponse) GetInfo() *UserSessionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

// Request message for 'UserSessionService.GetAllByUserId'.
type GetAllByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID.
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// If onlyExisting is true, then only user's existing sessions are returned.
	OnlyExisting bool `protobuf:"varint,2,opt,name=only_existing,json=onlyExisting,proto3" json:"only_existing,omitempty"`
}

func (x *GetAllByUserIdRequest) Reset() {
	*x = GetAllByUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByUserIdRequest) ProtoMessage() {}

func (x *GetAllByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByUserIdRequest.ProtoReflect.Descriptor instead.
func (*GetAllByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetAllByUserIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllByUserIdRequest) GetOnlyExisting() bool {
	if x != nil {
		return x.OnlyExisting
	}
	return false
}

// Response message for 'UserSessionService.GetAllByUserId'.
type GetAllByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's sessions.
	Sessions []*UserSessionInfo `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetAllByUserIdResponse) Reset() {
	*x = GetAllByUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByUserIdResponse) ProtoMessage() {}

func (x *GetAllByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetAllByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{8}
}

func (x *GetAllByUserIdResponse) GetSessions() []*UserSessionInfo {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// Request message for 'UserSessionService.GetAllByClientId'.
type GetAllByClientIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The client ID.
	ClientId uint64 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// If onlyExisting is true, then only existing sessions of users are returned.
	OnlyExisting bool `protobuf:"varint,2,opt,name=only_existing,json=onlyExisting,proto3" json:"only_existing,omitempty"`
}

func (x *GetAllByClientIdRequest) Reset() {
	*x = GetAllByClientIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByClientIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByClientIdRequest) ProtoMessage() {}

func (x *GetAllByClientIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByClientIdRequest.ProtoReflect.Descriptor instead.
func (*GetAllByClientIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllByClientIdRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *GetAllByClientIdRequest) GetOnlyExisting() bool {
	if x != nil {
		return x.OnlyExisting
	}
	return false
}

// Response message for 'UserSessionService.GetAllByClientId'.
type GetAllByClientIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user sessions.
	Sessions []*UserSessionInfo `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetAllByClientIdResponse) Reset() {
	*x = GetAllByClientIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByClientIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByClientIdResponse) ProtoMessage() {}

func (x *GetAllByClientIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByClientIdResponse.ProtoReflect.Descriptor instead.
func (*GetAllByClientIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllByClientIdResponse) GetSessions() []*UserSessionInfo {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// Request message for 'UserSessionService.GetAllByUserIdAndClientId'.
type GetAllByUserIdAndClientIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID.
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The client ID.
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// If onlyExisting is true, then only user's existing sessions are returned.
	OnlyExisting bool `protobuf:"varint,3,opt,name=only_existing,json=onlyExisting,proto3" json:"only_existing,omitempty"`
}

func (x *GetAllByUserIdAndClientIdRequest) Reset() {
	*x = GetAllByUserIdAndClientIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByUserIdAndClientIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByUserIdAndClientIdRequest) ProtoMessage() {}

func (x *GetAllByUserIdAndClientIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByUserIdAndClientIdRequest.ProtoReflect.Descriptor instead.
func (*GetAllByUserIdAndClientIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllByUserIdAndClientIdRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAllByUserIdAndClientIdRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *GetAllByUserIdAndClientIdRequest) GetOnlyExisting() bool {
	if x != nil {
		return x.OnlyExisting
	}
	return false
}

// Response message for 'UserSessionService.GetAllByUserIdAndClientId'.
type GetAllByUserIdAndClientIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's sessions.
	Sessions []*UserSessionInfo `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetAllByUserIdAndClientIdResponse) Reset() {
	*x = GetAllByUserIdAndClientIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByUserIdAndClientIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByUserIdAndClientIdResponse) ProtoMessage() {}

func (x *GetAllByUserIdAndClientIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByUserIdAndClientIdResponse.ProtoReflect.Descriptor instead.
func (*GetAllByUserIdAndClientIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllByUserIdAndClientIdResponse) GetSessions() []*UserSessionInfo {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// Request message for 'UserSessionService.GetAllByUserAgentId'.
type GetAllByUserAgentIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user agent ID.
	UserAgentId uint64 `protobuf:"varint,1,opt,name=user_agent_id,json=userAgentId,proto3" json:"user_agent_id,omitempty"`
	// If onlyExisting is true, then only user's existing sessions are returned.
	OnlyExisting bool `protobuf:"varint,2,opt,name=only_existing,json=onlyExisting,proto3" json:"only_existing,omitempty"`
}

func (x *GetAllByUserAgentIdRequest) Reset() {
	*x = GetAllByUserAgentIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByUserAgentIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByUserAgentIdRequest) ProtoMessage() {}

func (x *GetAllByUserAgentIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByUserAgentIdRequest.ProtoReflect.Descriptor instead.
func (*GetAllByUserAgentIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllByUserAgentIdRequest) GetUserAgentId() uint64 {
	if x != nil {
		return x.UserAgentId
	}
	return 0
}

func (x *GetAllByUserAgentIdRequest) GetOnlyExisting() bool {
	if x != nil {
		return x.OnlyExisting
	}
	return false
}

// Response message for 'UserSessionService.GetAllByUserAgentId'.
type GetAllByUserAgentIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's sessions.
	Sessions []*UserSessionInfo `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *GetAllByUserAgentIdResponse) Reset() {
	*x = GetAllByUserAgentIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllByUserAgentIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllByUserAgentIdResponse) ProtoMessage() {}

func (x *GetAllByUserAgentIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllByUserAgentIdResponse.ProtoReflect.Descriptor instead.
func (*GetAllByUserAgentIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllByUserAgentIdResponse) GetSessions() []*UserSessionInfo {
	if x != nil {
		return x.Sessions
	}
	return nil
}

// Request message for 'UserSessionService.Exists'.
type ExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user ID.
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The client ID.
	ClientId uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The user agent ID.
	UserAgentId uint64 `protobuf:"varint,3,opt,name=user_agent_id,json=userAgentId,proto3" json:"user_agent_id,omitempty"`
}

func (x *ExistsRequest) Reset() {
	*x = ExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsRequest) ProtoMessage() {}

func (x *ExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsRequest.ProtoReflect.Descriptor instead.
func (*ExistsRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{15}
}

func (x *ExistsRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExistsRequest) GetClientId() uint64 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ExistsRequest) GetUserAgentId() uint64 {
	if x != nil {
		return x.UserAgentId
	}
	return 0
}

// Response message for 'UserSessionService.Exists'.
type ExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session exists.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *ExistsResponse) Reset() {
	*x = ExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsResponse) ProtoMessage() {}

func (x *ExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsResponse.ProtoReflect.Descriptor instead.
func (*ExistsResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{16}
}

func (x *ExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// Request message for 'UserSessionService.GetTypeById'.
type GetTypeByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session ID.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTypeByIdRequest) Reset() {
	*x = GetTypeByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTypeByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTypeByIdRequest) ProtoMessage() {}

func (x *GetTypeByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTypeByIdRequest.ProtoReflect.Descriptor instead.
func (*GetTypeByIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetTypeByIdRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for 'UserSessionService.GetTypeById'.
type GetTypeByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session type.
	Type UserSessionTypeEnum_UserSessionType `protobuf:"varint,1,opt,name=type,proto3,enum=personalwebsite.identity.sessions.usersessions.UserSessionTypeEnum_UserSessionType" json:"type,omitempty"`
}

func (x *GetTypeByIdResponse) Reset() {
	*x = GetTypeByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTypeByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTypeByIdResponse) ProtoMessage() {}

func (x *GetTypeByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTypeByIdResponse.ProtoReflect.Descriptor instead.
func (*GetTypeByIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetTypeByIdResponse) GetType() UserSessionTypeEnum_UserSessionType {
	if x != nil {
		return x.Type
	}
	return UserSessionTypeEnum_UNSPECIFIED
}

// Request message for 'UserSessionService.GetStatusById'.
type GetStatusByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session ID.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetStatusByIdRequest) Reset() {
	*x = GetStatusByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusByIdRequest) ProtoMessage() {}

func (x *GetStatusByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusByIdRequest.ProtoReflect.Descriptor instead.
func (*GetStatusByIdRequest) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetStatusByIdRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// Response message for 'UserSessionService.GetStatusById'.
type GetStatusByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's session status.
	Status UserSessionStatusEnum_UserSessionStatus `protobuf:"varint,1,opt,name=status,proto3,enum=personalwebsite.identity.sessions.usersessions.UserSessionStatusEnum_UserSessionStatus" json:"status,omitempty"`
}

func (x *GetStatusByIdResponse) Reset() {
	*x = GetStatusByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusByIdResponse) ProtoMessage() {}

func (x *GetStatusByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusByIdResponse.ProtoReflect.Descriptor instead.
func (*GetStatusByIdResponse) Descriptor() ([]byte, []int) {
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatusByIdResponse) GetStatus() UserSessionStatusEnum_UserSessionStatus {
	if x != nil {
		return x.Status
	}
	return UserSessionStatusEnum_UNSPECIFIED
}

var File_apis_identity_sessions_usersessions_user_session_service_proto protoreflect.FileDescriptor

var file_apis_identity_sessions_usersessions_user_session_service_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x61,
	0x70, 0x69, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x1f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x65, 0x62,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x70, 0x22, 0x32, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x01, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x70, 0x22,
	0x35, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x66, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f,
	0x6e, 0x6c, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x75, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22,
	0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x08, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a,
	0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x65, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x22, 0x7a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a,
	0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x67, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x53, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x88, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x57, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0xa7, 0x0e, 0x0a, 0x12,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xbf, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x57,
	0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x50, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xc8, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x40, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x3e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x45, 0x2e, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x46, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x47, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x42, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x50, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x51, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4a, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b,
	0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x06, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x42, 0x2e, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x44, 0x2e, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x70,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x49, 0x5a, 0x47, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x2d, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x76, 0x32, 0x2f, 0x67, 0x6f, 0x2d,
	0x61, 0x70, 0x69, 0x73, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescOnce sync.Once
	file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescData = file_apis_identity_sessions_usersessions_user_session_service_proto_rawDesc
)

func file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescGZIP() []byte {
	file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescOnce.Do(func() {
		file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescData)
	})
	return file_apis_identity_sessions_usersessions_user_session_service_proto_rawDescData
}

var file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_apis_identity_sessions_usersessions_user_session_service_proto_goTypes = []interface{}{
	(*CreateAndStartWebSessionRequest)(nil),      // 0: personalwebsite.identity.sessions.usersessions.CreateAndStartWebSessionRequest
	(*CreateAndStartWebSessionResponse)(nil),     // 1: personalwebsite.identity.sessions.usersessions.CreateAndStartWebSessionResponse
	(*CreateAndStartMobileSessionRequest)(nil),   // 2: personalwebsite.identity.sessions.usersessions.CreateAndStartMobileSessionRequest
	(*CreateAndStartMobileSessionResponse)(nil),  // 3: personalwebsite.identity.sessions.usersessions.CreateAndStartMobileSessionResponse
	(*TerminateRequest)(nil),                     // 4: personalwebsite.identity.sessions.usersessions.TerminateRequest
	(*GetByIdRequest)(nil),                       // 5: personalwebsite.identity.sessions.usersessions.GetByIdRequest
	(*GetByIdResponse)(nil),                      // 6: personalwebsite.identity.sessions.usersessions.GetByIdResponse
	(*GetAllByUserIdRequest)(nil),                // 7: personalwebsite.identity.sessions.usersessions.GetAllByUserIdRequest
	(*GetAllByUserIdResponse)(nil),               // 8: personalwebsite.identity.sessions.usersessions.GetAllByUserIdResponse
	(*GetAllByClientIdRequest)(nil),              // 9: personalwebsite.identity.sessions.usersessions.GetAllByClientIdRequest
	(*GetAllByClientIdResponse)(nil),             // 10: personalwebsite.identity.sessions.usersessions.GetAllByClientIdResponse
	(*GetAllByUserIdAndClientIdRequest)(nil),     // 11: personalwebsite.identity.sessions.usersessions.GetAllByUserIdAndClientIdRequest
	(*GetAllByUserIdAndClientIdResponse)(nil),    // 12: personalwebsite.identity.sessions.usersessions.GetAllByUserIdAndClientIdResponse
	(*GetAllByUserAgentIdRequest)(nil),           // 13: personalwebsite.identity.sessions.usersessions.GetAllByUserAgentIdRequest
	(*GetAllByUserAgentIdResponse)(nil),          // 14: personalwebsite.identity.sessions.usersessions.GetAllByUserAgentIdResponse
	(*ExistsRequest)(nil),                        // 15: personalwebsite.identity.sessions.usersessions.ExistsRequest
	(*ExistsResponse)(nil),                       // 16: personalwebsite.identity.sessions.usersessions.ExistsResponse
	(*GetTypeByIdRequest)(nil),                   // 17: personalwebsite.identity.sessions.usersessions.GetTypeByIdRequest
	(*GetTypeByIdResponse)(nil),                  // 18: personalwebsite.identity.sessions.usersessions.GetTypeByIdResponse
	(*GetStatusByIdRequest)(nil),                 // 19: personalwebsite.identity.sessions.usersessions.GetStatusByIdRequest
	(*GetStatusByIdResponse)(nil),                // 20: personalwebsite.identity.sessions.usersessions.GetStatusByIdResponse
	(*wrapperspb.UInt64Value)(nil),               // 21: google.protobuf.UInt64Value
	(*UserSessionInfo)(nil),                      // 22: personalwebsite.identity.sessions.usersessions.UserSessionInfo
	(UserSessionTypeEnum_UserSessionType)(0),     // 23: personalwebsite.identity.sessions.usersessions.UserSessionTypeEnum.UserSessionType
	(UserSessionStatusEnum_UserSessionStatus)(0), // 24: personalwebsite.identity.sessions.usersessions.UserSessionStatusEnum.UserSessionStatus
	(*emptypb.Empty)(nil),                        // 25: google.protobuf.Empty
}
var file_apis_identity_sessions_usersessions_user_session_service_proto_depIdxs = []int32{
	21, // 0: personalwebsite.identity.sessions.usersessions.CreateAndStartWebSessionRequest.app_id:type_name -> google.protobuf.UInt64Value
	22, // 1: personalwebsite.identity.sessions.usersessions.GetByIdResponse.info:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionInfo
	22, // 2: personalwebsite.identity.sessions.usersessions.GetAllByUserIdResponse.sessions:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionInfo
	22, // 3: personalwebsite.identity.sessions.usersessions.GetAllByClientIdResponse.sessions:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionInfo
	22, // 4: personalwebsite.identity.sessions.usersessions.GetAllByUserIdAndClientIdResponse.sessions:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionInfo
	22, // 5: personalwebsite.identity.sessions.usersessions.GetAllByUserAgentIdResponse.sessions:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionInfo
	23, // 6: personalwebsite.identity.sessions.usersessions.GetTypeByIdResponse.type:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionTypeEnum.UserSessionType
	24, // 7: personalwebsite.identity.sessions.usersessions.GetStatusByIdResponse.status:type_name -> personalwebsite.identity.sessions.usersessions.UserSessionStatusEnum.UserSessionStatus
	0,  // 8: personalwebsite.identity.sessions.usersessions.UserSessionService.CreateAndStartWebSession:input_type -> personalwebsite.identity.sessions.usersessions.CreateAndStartWebSessionRequest
	2,  // 9: personalwebsite.identity.sessions.usersessions.UserSessionService.CreateAndStartMobileSession:input_type -> personalwebsite.identity.sessions.usersessions.CreateAndStartMobileSessionRequest
	4,  // 10: personalwebsite.identity.sessions.usersessions.UserSessionService.Terminate:input_type -> personalwebsite.identity.sessions.usersessions.TerminateRequest
	5,  // 11: personalwebsite.identity.sessions.usersessions.UserSessionService.GetById:input_type -> personalwebsite.identity.sessions.usersessions.GetByIdRequest
	7,  // 12: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByUserId:input_type -> personalwebsite.identity.sessions.usersessions.GetAllByUserIdRequest
	9,  // 13: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByClientId:input_type -> personalwebsite.identity.sessions.usersessions.GetAllByClientIdRequest
	11, // 14: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByUserIdAndClientId:input_type -> personalwebsite.identity.sessions.usersessions.GetAllByUserIdAndClientIdRequest
	13, // 15: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByUserAgentId:input_type -> personalwebsite.identity.sessions.usersessions.GetAllByUserAgentIdRequest
	15, // 16: personalwebsite.identity.sessions.usersessions.UserSessionService.Exists:input_type -> personalwebsite.identity.sessions.usersessions.ExistsRequest
	17, // 17: personalwebsite.identity.sessions.usersessions.UserSessionService.GetTypeById:input_type -> personalwebsite.identity.sessions.usersessions.GetTypeByIdRequest
	19, // 18: personalwebsite.identity.sessions.usersessions.UserSessionService.GetStatusById:input_type -> personalwebsite.identity.sessions.usersessions.GetStatusByIdRequest
	1,  // 19: personalwebsite.identity.sessions.usersessions.UserSessionService.CreateAndStartWebSession:output_type -> personalwebsite.identity.sessions.usersessions.CreateAndStartWebSessionResponse
	3,  // 20: personalwebsite.identity.sessions.usersessions.UserSessionService.CreateAndStartMobileSession:output_type -> personalwebsite.identity.sessions.usersessions.CreateAndStartMobileSessionResponse
	25, // 21: personalwebsite.identity.sessions.usersessions.UserSessionService.Terminate:output_type -> google.protobuf.Empty
	6,  // 22: personalwebsite.identity.sessions.usersessions.UserSessionService.GetById:output_type -> personalwebsite.identity.sessions.usersessions.GetByIdResponse
	8,  // 23: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByUserId:output_type -> personalwebsite.identity.sessions.usersessions.GetAllByUserIdResponse
	10, // 24: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByClientId:output_type -> personalwebsite.identity.sessions.usersessions.GetAllByClientIdResponse
	12, // 25: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByUserIdAndClientId:output_type -> personalwebsite.identity.sessions.usersessions.GetAllByUserIdAndClientIdResponse
	14, // 26: personalwebsite.identity.sessions.usersessions.UserSessionService.GetAllByUserAgentId:output_type -> personalwebsite.identity.sessions.usersessions.GetAllByUserAgentIdResponse
	16, // 27: personalwebsite.identity.sessions.usersessions.UserSessionService.Exists:output_type -> personalwebsite.identity.sessions.usersessions.ExistsResponse
	18, // 28: personalwebsite.identity.sessions.usersessions.UserSessionService.GetTypeById:output_type -> personalwebsite.identity.sessions.usersessions.GetTypeByIdResponse
	20, // 29: personalwebsite.identity.sessions.usersessions.UserSessionService.GetStatusById:output_type -> personalwebsite.identity.sessions.usersessions.GetStatusByIdResponse
	19, // [19:30] is the sub-list for method output_type
	8,  // [8:19] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_apis_identity_sessions_usersessions_user_session_service_proto_init() }
func file_apis_identity_sessions_usersessions_user_session_service_proto_init() {
	if File_apis_identity_sessions_usersessions_user_session_service_proto != nil {
		return
	}
	file_apis_identity_sessions_usersessions_user_session_info_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndStartWebSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndStartWebSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndStartMobileSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAndStartMobileSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByClientIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByClientIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByUserIdAndClientIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByUserIdAndClientIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByUserAgentIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllByUserAgentIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTypeByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTypeByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_apis_identity_sessions_usersessions_user_session_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_apis_identity_sessions_usersessions_user_session_service_proto_goTypes,
		DependencyIndexes: file_apis_identity_sessions_usersessions_user_session_service_proto_depIdxs,
		MessageInfos:      file_apis_identity_sessions_usersessions_user_session_service_proto_msgTypes,
	}.Build()
	File_apis_identity_sessions_usersessions_user_session_service_proto = out.File
	file_apis_identity_sessions_usersessions_user_session_service_proto_rawDesc = nil
	file_apis_identity_sessions_usersessions_user_session_service_proto_goTypes = nil
	file_apis_identity_sessions_usersessions_user_session_service_proto_depIdxs = nil
}
