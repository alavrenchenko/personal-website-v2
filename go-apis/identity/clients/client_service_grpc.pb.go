// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/identity/clients/client_service.proto

package clients

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClientService_CreateWebClient_FullMethodName    = "/personalwebsite.identity.clients.ClientService/CreateWebClient"
	ClientService_CreateMobileClient_FullMethodName = "/personalwebsite.identity.clients.ClientService/CreateMobileClient"
	ClientService_Delete_FullMethodName             = "/personalwebsite.identity.clients.ClientService/Delete"
	ClientService_GetById_FullMethodName            = "/personalwebsite.identity.clients.ClientService/GetById"
	ClientService_GetTypeById_FullMethodName        = "/personalwebsite.identity.clients.ClientService/GetTypeById"
	ClientService_GetStatusById_FullMethodName      = "/personalwebsite.identity.clients.ClientService/GetStatusById"
)

// ClientServiceClient is the client API for ClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientServiceClient interface {
	// Creates a web client and returns the client ID if the operation is successful.
	CreateWebClient(ctx context.Context, in *CreateWebClientRequest, opts ...grpc.CallOption) (*CreateWebClientResponse, error)
	// Creates a mobile client and returns the client ID if the operation is successful.
	CreateMobileClient(ctx context.Context, in *CreateMobileClientRequest, opts ...grpc.CallOption) (*CreateMobileClientResponse, error)
	// Deletes a client by the specified client ID.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets a client by the specified client ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// Gets a client type by the specified client ID.
	GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error)
	// Gets a client status by the specified client ID.
	GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error)
}

type clientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientServiceClient(cc grpc.ClientConnInterface) ClientServiceClient {
	return &clientServiceClient{cc}
}

func (c *clientServiceClient) CreateWebClient(ctx context.Context, in *CreateWebClientRequest, opts ...grpc.CallOption) (*CreateWebClientResponse, error) {
	out := new(CreateWebClientResponse)
	err := c.cc.Invoke(ctx, ClientService_CreateWebClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) CreateMobileClient(ctx context.Context, in *CreateMobileClientRequest, opts ...grpc.CallOption) (*CreateMobileClientResponse, error) {
	out := new(CreateMobileClientResponse)
	err := c.cc.Invoke(ctx, ClientService_CreateMobileClient_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ClientService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, ClientService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error) {
	out := new(GetTypeByIdResponse)
	err := c.cc.Invoke(ctx, ClientService_GetTypeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientServiceClient) GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error) {
	out := new(GetStatusByIdResponse)
	err := c.cc.Invoke(ctx, ClientService_GetStatusById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientServiceServer is the server API for ClientService service.
// All implementations must embed UnimplementedClientServiceServer
// for forward compatibility
type ClientServiceServer interface {
	// Creates a web client and returns the client ID if the operation is successful.
	CreateWebClient(context.Context, *CreateWebClientRequest) (*CreateWebClientResponse, error)
	// Creates a mobile client and returns the client ID if the operation is successful.
	CreateMobileClient(context.Context, *CreateMobileClientRequest) (*CreateMobileClientResponse, error)
	// Deletes a client by the specified client ID.
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// Gets a client by the specified client ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// Gets a client type by the specified client ID.
	GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error)
	// Gets a client status by the specified client ID.
	GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error)
	mustEmbedUnimplementedClientServiceServer()
}

// UnimplementedClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientServiceServer struct {
}

func (UnimplementedClientServiceServer) CreateWebClient(context.Context, *CreateWebClientRequest) (*CreateWebClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebClient not implemented")
}
func (UnimplementedClientServiceServer) CreateMobileClient(context.Context, *CreateMobileClientRequest) (*CreateMobileClientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMobileClient not implemented")
}
func (UnimplementedClientServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClientServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedClientServiceServer) GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeById not implemented")
}
func (UnimplementedClientServiceServer) GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusById not implemented")
}
func (UnimplementedClientServiceServer) mustEmbedUnimplementedClientServiceServer() {}

// UnsafeClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientServiceServer will
// result in compilation errors.
type UnsafeClientServiceServer interface {
	mustEmbedUnimplementedClientServiceServer()
}

func RegisterClientServiceServer(s grpc.ServiceRegistrar, srv ClientServiceServer) {
	s.RegisterService(&ClientService_ServiceDesc, srv)
}

func _ClientService_CreateWebClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateWebClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_CreateWebClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateWebClient(ctx, req.(*CreateWebClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_CreateMobileClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMobileClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).CreateMobileClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_CreateMobileClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).CreateMobileClient(ctx, req.(*CreateMobileClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetTypeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetTypeById(ctx, req.(*GetTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientService_GetStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientServiceServer).GetStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientService_GetStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientServiceServer).GetStatusById(ctx, req.(*GetStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientService_ServiceDesc is the grpc.ServiceDesc for ClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.identity.clients.ClientService",
	HandlerType: (*ClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebClient",
			Handler:    _ClientService_CreateWebClient_Handler,
		},
		{
			MethodName: "CreateMobileClient",
			Handler:    _ClientService_CreateMobileClient_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClientService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _ClientService_GetById_Handler,
		},
		{
			MethodName: "GetTypeById",
			Handler:    _ClientService_GetTypeById_Handler,
		},
		{
			MethodName: "GetStatusById",
			Handler:    _ClientService_GetStatusById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/identity/clients/client_service.proto",
}
