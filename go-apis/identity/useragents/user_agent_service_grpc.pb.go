// Copyright 2023 Alexey Lavrenchenko. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: apis/identity/useragents/user_agent_service.proto

package useragents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserAgentService_CreateWebUserAgent_FullMethodName     = "/personalwebsite.identity.useragents.UserAgentService/CreateWebUserAgent"
	UserAgentService_CreateMobileUserAgent_FullMethodName  = "/personalwebsite.identity.useragents.UserAgentService/CreateMobileUserAgent"
	UserAgentService_Delete_FullMethodName                 = "/personalwebsite.identity.useragents.UserAgentService/Delete"
	UserAgentService_GetById_FullMethodName                = "/personalwebsite.identity.useragents.UserAgentService/GetById"
	UserAgentService_GetByUserIdAndClientId_FullMethodName = "/personalwebsite.identity.useragents.UserAgentService/GetByUserIdAndClientId"
	UserAgentService_GetAllByUserId_FullMethodName         = "/personalwebsite.identity.useragents.UserAgentService/GetAllByUserId"
	UserAgentService_GetAllByClientId_FullMethodName       = "/personalwebsite.identity.useragents.UserAgentService/GetAllByClientId"
	UserAgentService_Exists_FullMethodName                 = "/personalwebsite.identity.useragents.UserAgentService/Exists"
	UserAgentService_GetAllIdsByUserId_FullMethodName      = "/personalwebsite.identity.useragents.UserAgentService/GetAllIdsByUserId"
	UserAgentService_GetAllIdsByClientId_FullMethodName    = "/personalwebsite.identity.useragents.UserAgentService/GetAllIdsByClientId"
	UserAgentService_GetTypeById_FullMethodName            = "/personalwebsite.identity.useragents.UserAgentService/GetTypeById"
	UserAgentService_GetStatusById_FullMethodName          = "/personalwebsite.identity.useragents.UserAgentService/GetStatusById"
)

// UserAgentServiceClient is the client API for UserAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAgentServiceClient interface {
	// Creates a web user agent and returns the user agent ID if the operation is successful.
	CreateWebUserAgent(ctx context.Context, in *CreateWebUserAgentRequest, opts ...grpc.CallOption) (*CreateWebUserAgentResponse, error)
	// Creates a mobile user agent and returns the user agent ID if the operation is successful.
	CreateMobileUserAgent(ctx context.Context, in *CreateMobileUserAgentRequest, opts ...grpc.CallOption) (*CreateMobileUserAgentResponse, error)
	// Deletes a user agent by the specified user agent ID.
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets user agent by the specified user agent ID.
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	// Gets an existing user agent by the specified user ID and client ID.
	GetByUserIdAndClientId(ctx context.Context, in *GetByUserIdAndClientIdRequest, opts ...grpc.CallOption) (*GetByUserIdAndClientIdResponse, error)
	// Gets all user agents by the specified user ID.
	GetAllByUserId(ctx context.Context, in *GetAllByUserIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdResponse, error)
	// Gets all user agents by the specified client ID.
	GetAllByClientId(ctx context.Context, in *GetAllByClientIdRequest, opts ...grpc.CallOption) (*GetAllByClientIdResponse, error)
	// Returns true if the user agent exists.
	Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Gets all user agent IDs by the specified user ID.
	GetAllIdsByUserId(ctx context.Context, in *GetAllIdsByUserIdRequest, opts ...grpc.CallOption) (*GetAllIdsByUserIdResponse, error)
	// Gets all user agent IDs by the specified client ID.
	GetAllIdsByClientId(ctx context.Context, in *GetAllIdsByClientIdRequest, opts ...grpc.CallOption) (*GetAllIdsByClientIdResponse, error)
	// Gets a user agent type by the specified user agent ID.
	GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error)
	// Gets a user agent status by the specified user agent ID.
	GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error)
}

type userAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAgentServiceClient(cc grpc.ClientConnInterface) UserAgentServiceClient {
	return &userAgentServiceClient{cc}
}

func (c *userAgentServiceClient) CreateWebUserAgent(ctx context.Context, in *CreateWebUserAgentRequest, opts ...grpc.CallOption) (*CreateWebUserAgentResponse, error) {
	out := new(CreateWebUserAgentResponse)
	err := c.cc.Invoke(ctx, UserAgentService_CreateWebUserAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) CreateMobileUserAgent(ctx context.Context, in *CreateMobileUserAgentRequest, opts ...grpc.CallOption) (*CreateMobileUserAgentResponse, error) {
	out := new(CreateMobileUserAgentResponse)
	err := c.cc.Invoke(ctx, UserAgentService_CreateMobileUserAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserAgentService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetByUserIdAndClientId(ctx context.Context, in *GetByUserIdAndClientIdRequest, opts ...grpc.CallOption) (*GetByUserIdAndClientIdResponse, error) {
	out := new(GetByUserIdAndClientIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetByUserIdAndClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetAllByUserId(ctx context.Context, in *GetAllByUserIdRequest, opts ...grpc.CallOption) (*GetAllByUserIdResponse, error) {
	out := new(GetAllByUserIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetAllByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetAllByClientId(ctx context.Context, in *GetAllByClientIdRequest, opts ...grpc.CallOption) (*GetAllByClientIdResponse, error) {
	out := new(GetAllByClientIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetAllByClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) Exists(ctx context.Context, in *ExistsRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, UserAgentService_Exists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetAllIdsByUserId(ctx context.Context, in *GetAllIdsByUserIdRequest, opts ...grpc.CallOption) (*GetAllIdsByUserIdResponse, error) {
	out := new(GetAllIdsByUserIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetAllIdsByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetAllIdsByClientId(ctx context.Context, in *GetAllIdsByClientIdRequest, opts ...grpc.CallOption) (*GetAllIdsByClientIdResponse, error) {
	out := new(GetAllIdsByClientIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetAllIdsByClientId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetTypeById(ctx context.Context, in *GetTypeByIdRequest, opts ...grpc.CallOption) (*GetTypeByIdResponse, error) {
	out := new(GetTypeByIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetTypeById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAgentServiceClient) GetStatusById(ctx context.Context, in *GetStatusByIdRequest, opts ...grpc.CallOption) (*GetStatusByIdResponse, error) {
	out := new(GetStatusByIdResponse)
	err := c.cc.Invoke(ctx, UserAgentService_GetStatusById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAgentServiceServer is the server API for UserAgentService service.
// All implementations must embed UnimplementedUserAgentServiceServer
// for forward compatibility
type UserAgentServiceServer interface {
	// Creates a web user agent and returns the user agent ID if the operation is successful.
	CreateWebUserAgent(context.Context, *CreateWebUserAgentRequest) (*CreateWebUserAgentResponse, error)
	// Creates a mobile user agent and returns the user agent ID if the operation is successful.
	CreateMobileUserAgent(context.Context, *CreateMobileUserAgentRequest) (*CreateMobileUserAgentResponse, error)
	// Deletes a user agent by the specified user agent ID.
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	// Gets user agent by the specified user agent ID.
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	// Gets an existing user agent by the specified user ID and client ID.
	GetByUserIdAndClientId(context.Context, *GetByUserIdAndClientIdRequest) (*GetByUserIdAndClientIdResponse, error)
	// Gets all user agents by the specified user ID.
	GetAllByUserId(context.Context, *GetAllByUserIdRequest) (*GetAllByUserIdResponse, error)
	// Gets all user agents by the specified client ID.
	GetAllByClientId(context.Context, *GetAllByClientIdRequest) (*GetAllByClientIdResponse, error)
	// Returns true if the user agent exists.
	Exists(context.Context, *ExistsRequest) (*ExistsResponse, error)
	// Gets all user agent IDs by the specified user ID.
	GetAllIdsByUserId(context.Context, *GetAllIdsByUserIdRequest) (*GetAllIdsByUserIdResponse, error)
	// Gets all user agent IDs by the specified client ID.
	GetAllIdsByClientId(context.Context, *GetAllIdsByClientIdRequest) (*GetAllIdsByClientIdResponse, error)
	// Gets a user agent type by the specified user agent ID.
	GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error)
	// Gets a user agent status by the specified user agent ID.
	GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error)
	mustEmbedUnimplementedUserAgentServiceServer()
}

// UnimplementedUserAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAgentServiceServer struct {
}

func (UnimplementedUserAgentServiceServer) CreateWebUserAgent(context.Context, *CreateWebUserAgentRequest) (*CreateWebUserAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebUserAgent not implemented")
}
func (UnimplementedUserAgentServiceServer) CreateMobileUserAgent(context.Context, *CreateMobileUserAgentRequest) (*CreateMobileUserAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMobileUserAgent not implemented")
}
func (UnimplementedUserAgentServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserAgentServiceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserAgentServiceServer) GetByUserIdAndClientId(context.Context, *GetByUserIdAndClientIdRequest) (*GetByUserIdAndClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByUserIdAndClientId not implemented")
}
func (UnimplementedUserAgentServiceServer) GetAllByUserId(context.Context, *GetAllByUserIdRequest) (*GetAllByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByUserId not implemented")
}
func (UnimplementedUserAgentServiceServer) GetAllByClientId(context.Context, *GetAllByClientIdRequest) (*GetAllByClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllByClientId not implemented")
}
func (UnimplementedUserAgentServiceServer) Exists(context.Context, *ExistsRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedUserAgentServiceServer) GetAllIdsByUserId(context.Context, *GetAllIdsByUserIdRequest) (*GetAllIdsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIdsByUserId not implemented")
}
func (UnimplementedUserAgentServiceServer) GetAllIdsByClientId(context.Context, *GetAllIdsByClientIdRequest) (*GetAllIdsByClientIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIdsByClientId not implemented")
}
func (UnimplementedUserAgentServiceServer) GetTypeById(context.Context, *GetTypeByIdRequest) (*GetTypeByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypeById not implemented")
}
func (UnimplementedUserAgentServiceServer) GetStatusById(context.Context, *GetStatusByIdRequest) (*GetStatusByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusById not implemented")
}
func (UnimplementedUserAgentServiceServer) mustEmbedUnimplementedUserAgentServiceServer() {}

// UnsafeUserAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAgentServiceServer will
// result in compilation errors.
type UnsafeUserAgentServiceServer interface {
	mustEmbedUnimplementedUserAgentServiceServer()
}

func RegisterUserAgentServiceServer(s grpc.ServiceRegistrar, srv UserAgentServiceServer) {
	s.RegisterService(&UserAgentService_ServiceDesc, srv)
}

func _UserAgentService_CreateWebUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebUserAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).CreateWebUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_CreateWebUserAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).CreateWebUserAgent(ctx, req.(*CreateWebUserAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_CreateMobileUserAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMobileUserAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).CreateMobileUserAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_CreateMobileUserAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).CreateMobileUserAgent(ctx, req.(*CreateMobileUserAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetByUserIdAndClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByUserIdAndClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetByUserIdAndClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetByUserIdAndClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetByUserIdAndClientId(ctx, req.(*GetByUserIdAndClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetAllByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetAllByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetAllByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetAllByUserId(ctx, req.(*GetAllByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetAllByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllByClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetAllByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetAllByClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetAllByClientId(ctx, req.(*GetAllByClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).Exists(ctx, req.(*ExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetAllIdsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIdsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetAllIdsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetAllIdsByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetAllIdsByUserId(ctx, req.(*GetAllIdsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetAllIdsByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllIdsByClientIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetAllIdsByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetAllIdsByClientId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetAllIdsByClientId(ctx, req.(*GetAllIdsByClientIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetTypeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetTypeById(ctx, req.(*GetTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAgentService_GetStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAgentServiceServer).GetStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAgentService_GetStatusById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAgentServiceServer).GetStatusById(ctx, req.(*GetStatusByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAgentService_ServiceDesc is the grpc.ServiceDesc for UserAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "personalwebsite.identity.useragents.UserAgentService",
	HandlerType: (*UserAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebUserAgent",
			Handler:    _UserAgentService_CreateWebUserAgent_Handler,
		},
		{
			MethodName: "CreateMobileUserAgent",
			Handler:    _UserAgentService_CreateMobileUserAgent_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserAgentService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserAgentService_GetById_Handler,
		},
		{
			MethodName: "GetByUserIdAndClientId",
			Handler:    _UserAgentService_GetByUserIdAndClientId_Handler,
		},
		{
			MethodName: "GetAllByUserId",
			Handler:    _UserAgentService_GetAllByUserId_Handler,
		},
		{
			MethodName: "GetAllByClientId",
			Handler:    _UserAgentService_GetAllByClientId_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _UserAgentService_Exists_Handler,
		},
		{
			MethodName: "GetAllIdsByUserId",
			Handler:    _UserAgentService_GetAllIdsByUserId_Handler,
		},
		{
			MethodName: "GetAllIdsByClientId",
			Handler:    _UserAgentService_GetAllIdsByClientId_Handler,
		},
		{
			MethodName: "GetTypeById",
			Handler:    _UserAgentService_GetTypeById_Handler,
		},
		{
			MethodName: "GetStatusById",
			Handler:    _UserAgentService_GetStatusById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apis/identity/useragents/user_agent_service.proto",
}
